const WebSocket = require("ws");
const { readMarkers, writeMarkers } = require("./db");

const setupWebSocket = (server) => {
  const wss = new WebSocket.Server({ server });

  // –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
  const broadcastMarkers = () => {
    const data = JSON.stringify(readMarkers());
    wss.clients.forEach((client) => {
      if (client.readyState === WebSocket.OPEN) {
        client.send(data);
      }
    });
  };

  wss.on("connection", (ws) => {
    console.log("üîó –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω");

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –º–µ—Ç–∫–∏ –Ω–æ–≤–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
    ws.send(JSON.stringify(readMarkers()));

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    ws.on("message", (message) => {
      try {
        const newMarker = JSON.parse(message);
        if (!newMarker.lat || !newMarker.lng || !newMarker.name) return;

        const markers = readMarkers();
        markers.push(newMarker);
        writeMarkers(markers);

        // –†–∞—Å—Å—ã–ª–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
        broadcastMarkers();
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
      }
    });

    ws.on("close", () => console.log("‚ùå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω"));
  });

  return { broadcastMarkers };
};

module.exports = setupWebSocket;
